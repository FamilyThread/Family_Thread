 FamilyTree.templates.myTemplate = Object.assign({}, FamilyTree.templates.hugo);
    FamilyTree.templates.myTemplate.size = [200, 200];
    FamilyTree.templates.myTemplate.node = '<circle cx="100" cy="100" r="100" fill="grey" stroke-width="1" stroke="#aeaeae"></circle>';
    FamilyTree.templates.myTemplate.field_0 = '<text style="font-size: 16px;" fill="#FFFFF" x="45" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate.field_1 = '<text style="font-size: 24px;" fill="#FFFFF" x="100" y="60" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate.field_2 = '<text style="font-size: 16px;" fill="#FFFFF" x="155" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate.img_0 =
        '<clipPath id="ulaImg">'
        + '<circle cx="100" cy="150" r="40"></circle>'
        + '</clipPath>'
        + '<image preserveAspectRatio="xMidYMid slice" clip-path="url(#ulaImg)" xlink:href="{val}" x="60" y="110" width="80" height="80">'
        + '</image>';
    FamilyTree.templates.myTemplate_male = Object.assign({}, FamilyTree.templates.hugo);
    FamilyTree.templates.myTemplate_male.size = [200, 200];
    FamilyTree.templates.myTemplate_male.node = '<circle cx="100" cy="100" r="100" fill="blue" stroke-width="1" stroke="#aeaeae"></circle>';
    FamilyTree.templates.myTemplate_male.field_1 = '<text style="font-size: 24px;" fill="#FFFFF" x="100" y="60" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_male.field_0 = '<text style="font-size: 16px;" fill="#FFFFF" x="45" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_male.field_2 = '<text style="font-size: 16px;" fill="#FFFFF" x="155" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_male.img_0 =
        '<clipPath id="ulaImg">'
        + '<circle cx="100" cy="150" r="40"></circle>'
        + '</clipPath>'
        + '<image preserveAspectRatio="xMidYMid slice" clip-path="url(#ulaImg)" xlink:href="{val}" x="60" y="110" width="80" height="80">'
        + '</image>';

    //FamilyTree.templates.myTemplate_male.node = '<circle cx="100" cy="100" r="100" fill="#039be5" stroke-width="1" stroke="#aeaeae"></circle>';
    FamilyTree.templates.myTemplate_female = Object.assign({}, FamilyTree.templates.hugo);
    FamilyTree.templates.myTemplate_female.size = [200, 200];

    //FamilyTree.templates.myTemplate.field_0 = '<text style="font-size: 16px;" fill="#ffff" x="45" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_female.field_1 = '<text style="font-size: 24px;" fill="#FFFFF" x="100" y="60" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_female.field_0 = '<text style="font-size: 16px;" fill="#FFFFF" x="45" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_female.field_2 = '<text style="font-size: 16px;" fill="#FFFFF" x="155" y="90" text-anchor="middle">{val}</text>';
    FamilyTree.templates.myTemplate_female.node = '<circle cx="100" cy="100" r="100" fill="pink" stroke-width="1" stroke="#aeaeae"></circle>';

    FamilyTree.templates.myTemplate_female.img_0 =
        '<clipPath id="ulaImg">'
        + '<circle cx="100" cy="150" r="40"></circle>'
        + '</clipPath>'
        + '<image preserveAspectRatio="xMidYMid slice" clip-path="url(#ulaImg)" xlink:href="{val}" x="60" y="110" width="80" height="80">'
        + '</image>';
   // FamilyTree.templates.myTemplate_female.node = '<circle cx="100" cy="100" r="100" fill="#FF46A3" stroke-width="1" stroke="#aeaeae"></circle>';

    const treeFunction = () => {


        var family = new FamilyTree(container, {

            // state: {
            //     // readFromLocalStorage: true,
            //     // writeToLocalStorage: true,
            // },
            mouseScrool: FamilyTree.action.ctrlZoom,
            scaleInitial: 1,
            template: 'myTemplate',
            nodeBinding: {field_1: "name", field_0: "Date of Birth", field_2: "Date of Death"  ,img_0: "img"},
            searchDisplayField: 'name',
            searchFieldsWeight: {
                "name": 100, //percent
                "friends": 20 //percent
            },
            menu: {
                pdf: {text: "Export PDF"},
                json: {text: "Export JSON"}
            },

            mode: "light",
            nodeTreeMenu: true,

            nodeMenu: {
                scale: {
                    text: "Change Scaling",

                    // onClick: fitTreeScale
                }

            },
            editForm: { titleBinding: "name",
                photoBinding: "img",
                elements: [
                    {type: 'textbox', label: 'Full Name', binding: 'name'},
                    [
                        {type: 'date', label: 'Birth Date', binding: 'Date of Birth'},
                        {type: 'date', label: 'Death Date', binding: 'Date of Death'},
                        {type: 'checkbox', label: 'Still Alive?', binding: 'Checkbox'}
                    ],
                    {type: 'textbox', label: 'Place of Birth'},
                    {
                        type: 'textbox', label: 'Description'
                    },
                    { type: 'textbox', label: 'Photo Url', binding: 'img', btn: 'Upload' },
                ],
            }
        });

        family.onInit(() => {
        });

        family.load([{ id: 1, pids: [2], name: '', gender: '', img: "" }]);
    }

    return (
        <>
            <div style={{height: "100%"}}>
                {treeFunction()}
            </div>
        </>
    );


}